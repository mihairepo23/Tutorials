for number in numbers:DOCKER

IMAGE-->RUNNING CONTAINER-->STOPPED CONTAIER-->NEW IMAGE
   docker run                         docker commit
	 
docker search <OS>                ----> check available OS
docker pull <OS>                  ----> download OS
docker images                     ----> check all images
docker run -ti ubuntu:latest      ----> how to run a image
docker run -ti ubuntu:latest bash ----> how to run a image using bash
docker run -i <container>         ----> interactive mode for apps
docker run -p 8080:8080 jenkins   ----> port mapping
docker run -v /opt/test:/var/lib mysql->map the data to outside folder,needed to keep data if you want to delete a container 
docker run -d --name webapp nginx:1.14-alpine --> run and name the container
docker run -e APP_COLOR=blue nginx ---> add env variable to the application
docker run ubuntu --network=host/none---> change network assigned to the container
docker ps						  ----> list containers
docker ps -a                      ----> list all stoped containers
docker ps -l					  ----> list last stoped containers 
docker ps -l --format=$FORMAT     ----> list last stoped containers 
docker commit <name_of_container> <image_name> --->save a new image
               name_of_container -->from docker ps command
			   
docker run redis:4.0               ----> :4.0 = tag

docker run --rm -ti ubuntu sleep 5 ---> how to run a process within the contaier 
           --rm -->delete container when exit
docker run -ti ubuntu bash -c "sleep 3; echo all done"--> run container and execute 2 commands in order
						   -c --> execute more commands ex "<com1>;<com2>"
						   
docker run -d -ti ubuntu bash     ----> docker will run bash
           -d --> detach, means the command will run and run in the background
docker run -d --link redis:redis  ----> link 2 containers to work together
                     --------> redis:redis => name:hostname		
docker run --cpus=.5 ubuntu    -------> the container will not take more then 0.5 cpu from host
docker run --memory=100m ubuntu   ----> the container will not take more then 100mb from host
	
docker attach <nameofcontainer> ----> will bring it back to fg 
                nameofcontainer ---> from docker ps

docker exec -ti <nameofcontainer> bash --> will add a new process to a running container
docker logs <contaier_name>  ----> check for any issue with the running process4
	    <container_id>
docker kill <container_name> ----> stop container
docker rm <container_name>   ----> delete container
docker rm -f $(docker ps -a -q) --> delete all containers
docker rmi --force <repository name> ---> delete image
					repository name ---> from docker images
docker inspect <container-id>   ----> provides more details about a running container, such as IP address.
docker login               ---------> to login to https://hub.docker.com/
docker push <image_name>    --------> to upload image to https://hub.docker.com/
docker run -p 3000:3000 -v /app/node_modules -v $(pwd):/app 825d008daba1 -------> -v /app and -v $ will sync all the changes on files without
                                                                         running once again docker run
docker stats                 -------> check images statistics
docker network ls             ------> list available networks
docker run --network=none alpine ---> run image with no network
docker network inspect bridge  -----> check bridge network details
docker network create --driver bridge --subnet 182.18.0.1/24 --gateway 182.18.0.1 wp-mysql-network -->create new network
/var/lib/docker              -------> path for docker internal
docker volume create data_volume ---> will create folder data_volume under /var/lib/docker/volumes/
============================================
ENTRYPOINT vs CMD

dockerfile : ENTRYPOINT["sleep"]
docker run ubuntu 10
--> will sleep for 10 seconds

dockerfile : CMD ["sleep","10"]
                  command  param
-----> will default run sleep 10
==============================================================
Create a new internal network to isolate containers

docker network create \
		--driver bridge \
		--subnet 182.18.0.0/16
		custom-isolated-network
		
=================================
BUILD

#docker build . -t mihai23bogdan/my-simple-webapp ---> build own image
#docker build -f <file> .                      ------>specify what file you want to run

#use existing docker image as a base

FROM alpine


#download and install dependency

RUN apk add --update redis


#tell the image what to do when it starts as container


CMD ["redis-server"]
================================

NODE.JS

FROM node:alpine

WORKDIR /usr/app

COPY ./package.json ./
RUN npm install
COPY ./ ./

CMD ["npm", "start"]


FROM node:alpine

WORKDIR '/app'

COPY package.json .
RUN npm install
COPY . .

CMD ["npm","start"]


Example to build
1) Dockerfile:
FROM ubuntu

RUN apt-get update
RUN apt-get install -y python python3-pip
RUN pip install flask

COPY app.py /opt/app.py

ENTRYPOINT FLASK_APP=/opt/app.py flask run --host=0.0.0.0
2) app.py 
-----> code for the app
3) docker build . -t mihai23bogdan/my-simple-webapp ---> build own image
=======================================

COMPOSE

#docker-compose up  ----------------------> to run the compose from .yml 
#docker-compose up --build ---------------> to run compose and rebuild if needed
#docker-compose up -d          -----------> run in background
#docker-compose down ---------------------> stop compose
#docker-compose ps  ----------------------> status for the compose files

docker-compose.yml
version: "3"
services:
 redis:
   image: redis

 db:
   image: postgres:9.4

 vote:
   image: voting-app
   ports:
     - 5000:80
   links:
     - redis
 worker:
   image: worker-app
   links:
     - db
     - redis

 result:
   image: result-app
   ports:
     - 50001:80
   links:
     - db

  GNU nano 2.3.1              File: docker-compose.yml

version: '3'
services:
  redis-server:
    image: 'redis'
  node-app:
    restart: 'no'
    build: .
    ports:
      - "4001:8081"





